import { Event } from '../models/Event';
import { serviceDeskApi } from './api/serviceDeskApi';
import { eventRepository } from '../db';
import { LoggerService } from './api/logger';

const logger = new LoggerService();

class SyncService {
  async syncEventsForDateRange(startDate: Date, endDate: Date): Promise<void> {
    try {
      logger.info(`üîÑ D√©but de la synchronisation pour la p√©riode ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`);

      // R√©cup√©rer les √©v√©nements de l'API
      const apiEvents = await serviceDeskApi.getEvents(startDate, endDate);
      logger.success(`‚úÖ ${apiEvents.length} √©v√©nements r√©cup√©r√©s depuis l'API`);

      // R√©cup√©rer les √©v√©nements locaux pour la m√™me p√©riode
      const localEvents = await eventRepository.findBetweenDates(startDate, endDate);
      logger.info(`üìä ${localEvents.length} √©v√©nements trouv√©s en local`);

      // Cr√©er un index des √©v√©nements locaux par ID
      const localEventsById = new Map(localEvents.map(e => [e.id, e]));

      // Traiter chaque √©v√©nement de l'API
      for (const apiEvent of apiEvents) {
        const localEvent = localEventsById.get(apiEvent.id);

        if (!localEvent) {
          // Nouvel √©v√©nement
          await eventRepository.create(apiEvent);
          logger.success(`‚úÖ Nouvel √©v√©nement cr√©√©: ${apiEvent.name}`);
        } else if (new Date(apiEvent.updatedAt) > new Date(localEvent.updatedAt)) {
          // Mise √† jour n√©cessaire
          await eventRepository.update(apiEvent.id, apiEvent);
          logger.success(`‚úÖ √âv√©nement mis √† jour: ${apiEvent.name}`);
        }
      }

      // Supprimer les √©v√©nements locaux qui n'existent plus dans l'API
      const apiEventIds = new Set(apiEvents.map(e => e.id));
      for (const localEvent of localEvents) {
        if (!apiEventIds.has(localEvent.id)) {
          await eventRepository.delete(localEvent.id);
          logger.info(`üóëÔ∏è √âv√©nement supprim√©: ${localEvent.name}`);
        }
      }

      logger.success('‚úÖ Synchronisation termin√©e avec succ√®s');
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Erreur inconnue';
      logger.error(`‚ùå Erreur lors de la synchronisation: ${message}`);
      throw error;
    }
  }

  async getLastSyncStatus(): Promise<{ lastSync: Date | null; status: 'success' | 'error' | null }> {
    try {
      // Impl√©menter la logique pour r√©cup√©rer le statut de la derni√®re synchro
      return {
        lastSync: null,
        status: null
      };
    } catch (error) {
      logger.error('Erreur lors de la r√©cup√©ration du statut de synchronisation');
      return {
        lastSync: null,
        status: 'error'
      };
    }
  }
}

export const syncService = new SyncService();